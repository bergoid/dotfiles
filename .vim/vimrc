
" Turn off vi-compatibility
set nocompatible

" Set location where file/command/search history & gobal state is kept
execute 'set viminfo+=n' .  $HOME . '/.vim/viminfo'

" Disable Ex Mode
nnoremap Q <nop>

" Source vimscripts from a specific directory
function! Include(filename) abort
    execute 'source ' .  $HOME . '/.vim/' . a:filename
endfunction

" Print an error message at the bottom
function! PrintError(msg) abort
    execute 'normal! \<Esc>'
    echohl ErrorMsg
    echomsg a:msg
    echohl None
endfunction

" Map keypresses to commands, in all modes
call Include('fkeys/mappings.vim')

" Include this file instead of mappings.vim if you
" want to test ansi2key.vim :
"call Include('fkeys/mappings_mock.vim')

" Map bash escape sequences to vim-style descriptions of keypresses
call Include('fkeys/ansi2key.vim')

" Fuzzy file selection
call Include('fuzzy/select.vim')

" Yank to / paste from system clipboard
" This only works with a vim compiled with clipboard support.
" The output of "vim --version" should contain: "+clipboard"
" The simplest way to accomplish this is by installing gvim:
" the repository package will also contain a vanilla vim compiled
" with clipboard support.
" https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim/96#96<F12>
set clipboard=unnamedplus

" Don't create .netrwhist file
let g:netrw_dirhistmax = 0

" Restore screen contents after exit
"let &t_ti = "\<Esc>[?47h"
"let &t_te = "\<Esc>[?47l"

" Tabs
set expandtab
set tabstop=4
autocmd FileType make setlocal noexpandtab

" Syntax highlighting
syntax on
colorscheme earthrise

" Highlight all-caps TODO and FIXME
match Todo /TODO:\|TODO\|FIXME\|FIXME:NOTE\|NOTE:/ 
" Show matching brackets.
set showmatch

" Highlighting of search matches
set hlsearch
hi Search ctermbg=blue

" Highlight matching angle brackets
set mps+=<:>

" Highlight current line in dark grey
"set t_Co=256
set cursorline
hi CursorLine NONE ctermbg=233

" Highlight tabs and trailing whitespaces
highlight SpecialKey ctermfg=DarkGray ctermbg=233
set listchars=tab:>\ ,trail:\ 
set list

" Show (partial) command in status line.
set showcmd

" Remember last position in file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g'\"" | endif

" Indent size
set shiftwidth=4

" Enable auto indent
set autoindent
filetype plugin indent on

" Keep selection when indenting in visual mode
vnoremap > >gv
vnoremap < <gv

" Disable auto-word-wrap
set tw=0


" Search
set ignorecase                  " Do case insensitive matching ...
set smartcase                   " ... but case sensitive when search term contains caps.
set incsearch                   " Incremental search

" Don't jump forward/backwards when pressing '*'/'#'
"
"nnoremap * :keepjumps normal! *N<cr>
"nnoremap # :keepjumps normal! #N<cr>

" Search for selected text, forwards or backwards.
"vnoremap <silent> * :<C-U>
"  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
"  \gvy/<C-R><C-R>=substitute(
"  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
"  \gV:call setreg('"', old_reg, old_regtype)<CR>
"vnoremap <silent> # :<C-U>
"  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
"  \gvy?<C-R><C-R>=substitute(
"  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
"  \gV:call setreg('"', old_reg, old_regtype)<CR>


" Set leader key to ","
let mapleader = ","

" <leader>f in normal/visual mode: find current selection / nearest word
" NOT case-sensitive, NOT whole words
nnoremap <leader>f g*N
vnoremap <leader>f g*N<esc>

" <leader>F in normal/visual mode: find current selection / nearest word
" case-sensitive, NOT whole words
nnoremap <leader>F g*N:let @/.='\C'<cr>
vnoremap <leader>F g*N<esc>:let @/.='\C'<cr>
"nnoremap <leader>F :keepjumps normal! g*N<cr>:let @/.='\C'<cr>
"vnoremap <leader>F :keepjumps normal! g*N<cr>:let @/.='\C'<cr>

" <leader>w in normal/visual mode: find current selection / nearest word
" NOT case-sensitive, whole words
nnoremap <leader>w *N
vnoremap <leader>w *N<esc>
"nnoremap <leader>w :keepjumps normal! *N<cr>
"vnoremap <leader>w :keepjumps normal! *N<cr>

" <leader>W in normal/visual mode: find current selection / nearest word
" case-sensitive, whole words
nnoremap <leader>W *N:let @/.='\C'<cr>
vnoremap <leader>W *N<esc>:let @/.='\C'<cr>
"nnoremap <leader>W :keepjumps normal! *N<cr>:let @/.='\C'<cr>
"vnoremap <leader>W :keepjumps normal! *N<cr>:let @/.='\C'<cr>

" <leader>r in visual mode: find & replace current selection
vnoremap <leader>r "sy:.,$s/<C-R>=substitute(@s,"\n",'\\n','g')<CR>/

" Comment/uncomment
let s:comment_map = {
    \   "c": '//',
    \   "cpp": '//',
    \   "go": '//',
    \   "java": '//',
    \   "javascript": '//',
    \   "lua": '--',
    \   "scala": '//',
    \   "php": '//',
    \   "python": '#',
    \   "ruby": '#',
    \   "rust": '//',
    \   "sh": '#',
    \   "desktop": '#',
    \   "fstab": '#',
    \   "conf": '#',
    \   "profile": '#',
    \   "bashrc": '#',
    \   "bash_profile": '#',
    \   "mail": '>',
    \   "eml": '>',
    \   "bat": 'REM',
    \   "ahk": ';',
    \   "vim": '"',
    \   "tex": '%',
    \ }

function! Comment(on)

    if has_key(s:comment_map, &filetype)

        let l:comment_leader = escape(s:comment_map[&filetype], '\/')

        if a:on
            execute 'silent! s/^/' . l:comment_leader . ' /'
            execute 'silent! s/^' . l:comment_leader . '\s*$/' . l:comment_leader . '/'
        else
            execute 'silent! s/\v\s*\zs' . l:comment_leader . '\s?\ze//'
        endif

    else
        echohl ErrorMsg
        echomsg "No comment leader found for filetype: " . &filetype
        echohl None
    endif

endfunction

nnoremap <Leader>cc :call Comment(1)<CR>
vnoremap <Leader>cc :call Comment(1)<CR>
nnoremap <Leader>cu :call Comment(0)<CR>
vnoremap <Leader>cu :call Comment(0)<CR>

" delete without yanking
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" paste without yanking selection
vnoremap <leader>p "_dP

" <leader>b in normal mode: type 4 backticks, put curor in middle of them
" and go to insert mode.
nnoremap <leader>b i````<Esc>hi

" <leader>b in visual mode: surround selection with double backticks
vnoremap <leader>b di````<Esc>hhpll

" <leader>= in normal mode: underline current line
nnoremap <leader>= yyp<S-v>r=
" <leader>- in normal mode: underline current line
nnoremap <leader>- yyp<S-v>r-

" <leader>P in normal mode: set paste mode and enter insert mode
nnoremap <leader>P :set paste<CR>i

" Unset paste mode when leaving insert mode
autocmd InsertLeave * set nopaste

" Gracefully save buffer when receiving deadly signal
" Doesn't seem to work
autocmd VimLeavePre * if v:dying | execute "wa" | endif

" Disable code folding
set nofoldenable
